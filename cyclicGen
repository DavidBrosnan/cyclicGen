#!/usr/bin/env python

import sys
"""
This method will create a cyclic pattern of an designated length
"""
def generator(length):
	length = int(length)
	pattern = ""
	for i in range(0,length):
		if (i % 3) == 0:	# 26 * 10 * 3
			pattern += chr(ord("A") + ((i / 780) % 26))		# 780 = Aa0 -> Az9
		
		elif (i % 3) == 1:	# 10 * 3
			pattern += chr(ord("a") + ((i / 30) % 26))		# 30 = *a0 -> *a9

		else:
			pattern += str((i/3) % 10)		# 10 = **0 -> **9

	return pattern

"""
This method will find the offset of the overwritten eip address when given the segfaulted address
length should be >= length used in the original pattern
"""
def offset(length, address):

	address = address[2::].decode("hex")[::-1]		# remove 0x, decode to hex, reverse endianess
	pattern = generator(length)

	return pattern.index(address)

if __name__ == "__main__":

	func = sys.argv[1]

	if len(sys.argv) == 2 and func == "gen" :
			print generator(200)
	
	elif len(sys.argv) == 3 and func == "gen":
		print generator(sys.argv[2])

	elif len(sys.argv) == 3 and func == "off":
		print offset(200, sys.argv[2])

	elif len(sys.argv) == 4 and func == "off":
		print offset(sys.argv[2], sys.argv[3])

	else:
		pass
